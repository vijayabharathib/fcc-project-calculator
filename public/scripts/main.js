document.addEventListener("DOMContentLoaded",function(e){function t(e,t){var n=e;switch(t){case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":n=s?t:e+t,s=!1;break;case".":var r=/(\+|\*|\/|-)\d+$/;(e.indexOf(".")==-1||r.test(e))&&(n=e+t);break;case"+":case"/":case"*":e.indexOf("+")!=e.length-1&&e.indexOf("-")!=e.length-1&&e.indexOf("/")!=e.length-1&&e.indexOf("*")!=e.length-1&&(n=e+t),s=!1;break;case"-":var c=e.substr(e.length-2,e.length);/[-\+\/\*]{2}/.test(c)||(n=e+t),s=!1;break;case"Delete":n=e.substr(0,e.length-1);break;case"AC":case"c":n="";break;case"=":case"Enter":strExpression=e,n=a(strExpression),strExpression!==n&&(s=!0)}return n}function a(e){var t=0,a=e.split(/[-\+\*\/]+/),s=e.split(/[^-\+\*\/]+/);if("-"==s.shift()&&(a.shift(),a[0]=parseFloat(a[0])*-1),s.pop(),0==s.length)return e;for(var n=0;n<s.length;n++){var r=1;2==s[n].length&&"-"==s[n][1]&&(r=-1,s[n]=s[n][0]);var c=parseFloat(a[n]),i=parseFloat(a[n+1])*r;switch(s[n]){case"+":t=c+i;break;case"-":t=c-i;break;case"*":t=c*i;break;case"/":t=c/i}a[n+1]=t}return Number.isInteger(t)?t:t.toFixed(3)}for(var s=!1,n=function(e){var a=document.querySelector(".input"),s=a.value;a.value=t(s,this.innerText)},r=document.querySelectorAll("button"),c=0;c<r.length;c++)r[c].onclick=n;document.onkeypress=function(e){e.preventDefault();var a=document.querySelector(".input"),s=a.value;a.value=t(s,e.key)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
